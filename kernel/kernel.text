pri_print:
.LFB0:
	;cfi_startproc
	push	ebp
	;cfi_def_cfa_offset 8
	;cfi_offset 5, -8
	mov	ebp, esp
	;cfi_def_cfa_register 5
	push	ebx
	sub	esp, 20
	;cfi_offset 3, -12
	call	__x86.get_pc_thunk.cx
	add	ecx, $$-$
	mov	eax, DWORD 8[ebp]
	mov	BYTE -24[ebp], al
	lea	eax, 12[ebp]
	mov	DWORD -16[ebp], eax
	jmp	.L2
.L33:
	mov	eax, DWORD 12[ebp]
	movzx	eax, BYTE [eax]
	cmp	al, 37
	jne	.L3
	mov	eax, DWORD 12[ebp]
	add	eax, 1
	mov	DWORD 12[ebp], eax
	add	DWORD -16[ebp], 4
	mov	eax, DWORD 12[ebp]
	movzx	eax, BYTE [eax]
	movsx	eax, al
	sub	eax, 82
	cmp	eax, 38
	ja	.L32
	sal	eax, 2
	mov	eax, DWORD [.L6+eax+ecx]
	add	eax, ecx
	jmp	eax
	;section	.rodata
	;align 4
	;align 4
.L6:
	;long	.L14
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L5
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L13
	;long	.L12
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L12
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L32
	;long	.L29
	;long	.L10
	;long	.L7
	;long	.L32
	;long	.L32
	;long	.L9
	;long	.L8
	;long	.L7
	;long	.L32
	;long	.L32
	;long	.L5
	;text
.L13:
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	mov	edx, DWORD -16[ebp]
	movzx	edx, BYTE [edx]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
	jmp	.L32
.L12:
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	test	eax, eax
	jns	.L7
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	mov	BYTE [eax], 45
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	neg	eax
	mov	edx, eax
	mov	eax, DWORD -16[ebp]
	mov	DWORD [eax], edx
.L7:
;APP
; 24 "./OS_functions/kernel/primative.h" 1
	push 10

; 0 "" 2
;NO_APP
.L15:
	mov	eax, DWORD -16[ebp]
	mov	ebx, DWORD [eax]
	mov	edx, -858993459
	mov	eax, ebx
	mul	edx
	shr	edx, 3
	mov	eax, edx
	sal	eax, 2
	add	eax, edx
	add	eax, eax
	sub	ebx, eax
	mov	edx, ebx
;APP
; 26 "./OS_functions/kernel/primative.h" 1
	push edx

; 0 "" 2
;NO_APP
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	mov	edx, -858993459
	mul	edx
	shr	edx, 3
	mov	eax, DWORD -16[ebp]
	mov	DWORD [eax], edx
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	test	eax, eax
	jne	.L15
;APP
; 29 "./OS_functions/kernel/primative.h" 1
	pop edx
add dl,'0'

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
	jmp	.L16
.L17:
	mov	eax, DWORD [cursor.0+ecx]
	movzx	edx, BYTE -17[ebp]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	add	eax, 1
	mov	DWORD [cursor.0+ecx], eax
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
;APP
; 34 "./OS_functions/kernel/primative.h" 1
	pop edx
add dl,'0'

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
.L16:
	cmp	BYTE -17[ebp], 57
	jle	.L17
	jmp	.L32
.L5:
;APP
; 39 "./OS_functions/kernel/primative.h" 1
	push 127

; 0 "" 2
;NO_APP
.L20:
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	and	eax, 15
	cmp	eax, 9
	jbe	.L18
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	and	eax, 15
	mov	edx, eax
	mov	eax, DWORD 12[ebp]
	movzx	eax, BYTE [eax]
	movsx	eax, al
	add	eax, edx
	sub	eax, 33
	jmp	.L19
.L18:
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	and	eax, 15
	add	eax, 48
.L19:
;APP
; 41 "./OS_functions/kernel/primative.h" 1
	push eax

; 0 "" 2
;NO_APP
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	shr	eax, 4
	mov	edx, eax
	mov	eax, DWORD -16[ebp]
	mov	DWORD [eax], edx
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	test	eax, eax
	jne	.L20
;APP
; 44 "./OS_functions/kernel/primative.h" 1
	pop edx

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
	jmp	.L21
.L22:
	mov	eax, DWORD [cursor.0+ecx]
	movzx	edx, BYTE -17[ebp]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	add	eax, 1
	mov	DWORD [cursor.0+ecx], eax
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
;APP
; 49 "./OS_functions/kernel/primative.h" 1
	pop edx

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
.L21:
	cmp	BYTE -17[ebp], 102
	jle	.L22
	jmp	.L32
.L9:
	mov	DWORD -12[ebp], 0
	jmp	.L23
.L24:
	mov	eax, DWORD -16[ebp]
	mov	edx, DWORD [eax]
	mov	eax, DWORD -12[ebp]
	add	eax, edx
	mov	ebx, eax
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE [ebx]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
	add	DWORD -12[ebp], 1
.L23:
	mov	eax, DWORD -16[ebp]
	mov	edx, DWORD [eax]
	mov	eax, DWORD -12[ebp]
	add	eax, edx
	movzx	eax, BYTE [eax]
	test	al, al
	jne	.L24
	jmp	.L32
.L10:
;APP
; 59 "./OS_functions/kernel/primative.h" 1
	push 10

; 0 "" 2
;NO_APP
	jmp	.L25
.L26:
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	and	eax, 7
;APP
; 61 "./OS_functions/kernel/primative.h" 1
	push eax

; 0 "" 2
;NO_APP
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	shr	eax, 3
	mov	edx, eax
	mov	eax, DWORD -16[ebp]
	mov	DWORD [eax], edx
.L25:
	mov	eax, DWORD -16[ebp]
	mov	eax, DWORD [eax]
	test	eax, eax
	jne	.L26
;APP
; 64 "./OS_functions/kernel/primative.h" 1
	pop edx
add dl,'0'

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
	jmp	.L27
.L28:
	mov	eax, DWORD [cursor.0+ecx]
	movzx	edx, BYTE -17[ebp]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	add	eax, 1
	mov	DWORD [cursor.0+ecx], eax
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
;APP
; 69 "./OS_functions/kernel/primative.h" 1
	pop edx
add dl,'0'

; 0 "" 2
;NO_APP
	mov	eax, edx
	mov	BYTE -17[ebp], al
.L27:
	cmp	BYTE -17[ebp], 55
	jle	.L28
	jmp	.L32
.L34:
	nop
.L29:
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	mov	BYTE [eax], 32
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	mov	ebx, eax
	mov	edx, -858993459
	mov	eax, ebx
	mul	edx
	shr	edx, 7
	mov	eax, edx
	sal	eax, 2
	add	eax, edx
	sal	eax, 5
	sub	ebx, eax
	mov	edx, ebx
	test	edx, edx
	jne	.L34
	jmp	.L32
.L8:
	mov	DWORD -8[ebp], 8
	jmp	.L30
.L31:
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	mov	BYTE [eax], 32
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
	sub	DWORD -8[ebp], 1
.L30:
	cmp	DWORD -8[ebp], 0
	jg	.L31
	jmp	.L32
.L14:
	mov	DWORD [cursor.0+ecx], 0
	jmp	.L32
.L3:
	mov	edx, DWORD 12[ebp]
	mov	eax, DWORD [cursor.0+ecx]
	movzx	edx, BYTE [edx]
	mov	BYTE [eax], dl
	mov	eax, DWORD [cursor.0+ecx]
	add	eax, 1
	mov	DWORD [cursor.0+ecx], eax
	mov	eax, DWORD [cursor.0+ecx]
	lea	edx, 1[eax]
	mov	DWORD [cursor.0+ecx], edx
	movzx	edx, BYTE -24[ebp]
	mov	BYTE [eax], dl
.L32:
	mov	eax, DWORD 12[ebp]
	add	eax, 1
	mov	DWORD 12[ebp], eax
.L2:
	mov	eax, DWORD 12[ebp]
	movzx	eax, BYTE [eax]
	test	al, al
	jne	.L33
	nop
	nop
	mov	ebx, DWORD -4[ebp]
	leave
	;cfi_restore 5
	;cfi_restore 3
	;cfi_def_cfa 4, 4
	ret
	;cfi_endproc
test:
.LFB1:
	;cfi_startproc
	push	ebp
	;cfi_def_cfa_offset 8
	;cfi_offset 5, -8
	mov	ebp, esp
	;cfi_def_cfa_register 5
	call	__x86.get_pc_thunk.ax
	add	eax, $$-$
	lea	eax, [SHREK.LC0+eax]
	push	eax
	push	15
	call	pri_print
	add	esp, 8
	mov	eax, 0
	leave
	;cfi_restore 5
	;cfi_def_cfa 4, 4
	ret
	;cfi_endproc
main:
.LFB2:
	;cfi_startproc
	push	ebp
	;cfi_def_cfa_offset 8
	;cfi_offset 5, -8
	mov	ebp, esp
	;cfi_def_cfa_register 5
	push	ebx
	;cfi_offset 3, -12
	call	__x86.get_pc_thunk.bx
	add	ebx, $$-$
	lea	eax, [SHREK.LC1+ebx]
	push	eax
	push	15
	call	pri_print
	add	esp, 8
	lea	eax, [SHREK.LC2+ebx]
	push	eax
	push	15
	call	pri_print
	add	esp, 8
;APP
; 11 "./kernel/kernel.c" 1
	hlt

; 0 "" 2
;NO_APP
	mov	eax, 0
	mov	ebx, DWORD -4[ebp]
	leave
	;cfi_restore 5
	;cfi_restore 3
	;cfi_def_cfa 4, 4
	ret
	;cfi_endproc
__x86.get_pc_thunk.ax:
.LFB3:
	;cfi_startproc
	mov	eax, DWORD [esp]
	ret
	;cfi_endproc
__x86.get_pc_thunk.cx:
.LFB4:
	;cfi_startproc
	mov	ecx, DWORD [esp]
	ret
	;cfi_endproc
__x86.get_pc_thunk.bx:
.LFB5:
	;cfi_startproc
	mov	ebx, DWORD [esp]
	ret
	;cfi_endproc

